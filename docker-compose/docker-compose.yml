version: '2.2'
services:
  signal_databasee:
    image:          postgres:11
    container_name: postgres_database
    restart:        always
    environment:
      POSTGRES_USER:     postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES:       abusedb, accountdb, keysdb, messagedb
      PGDATA:            /var/lib/postgresql/data/pgdata
    ports:
      - '5432:5432'
    volumes:
      - ./postgres_database:/var/lib/postgresql/data
      - ./pg-init-scripts:/docker-entrypoint-initdb.d
  redis_main:
    image: redis:5
    container_name: redis_main
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - ./redis_main:/data
  redis_replication:
    image: redis:5
    container_name: redis_replication
    restart: always
    command: redis-server --port 6380
    ports:
      - '6380:6380'
    volumes:
      - ./redis_replication:/data

  # Remove lines below if you don't plan to use NginX in container mode or don't have SSL certificate
  nginx:
    image: nginx:1.20
    container_name: nginx
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/private.key:/etc/nginx/cert/private.key
      - ./nginx/certificate.crt:/etc/nginx/cert/certificate.crt

   #Remove lines below if you don't plan to use CoTurn in container mode
  coturn:
    image: coturn/coturn:4.5
    container_name: coturn
    restart: always
    ports:
      - 3478:3478
      - 3478:3478/udp
    # - 49160-65535:49160-65535/udp
    volumes:
      - ./coturn/turnserver.conf:/etc/coturn/turnserver.conf
    mem_limit: 600m



  # Remove lines below if you don't want PostgresDB management GUI
  signal_adminer:
    container_name: signal_adminer
    image:          adminer:latest
    ports:
      - 8000:8080
    links:
      - signal_databasee
    environment:
      ADMINER_DESIGN: nette
    networks:
      - default

  # Remove lines below if you don't want Redis management GUI
  redis_commander:
    container_name: redis_commander
    image:          rediscommander/redis-commander:latest
    hostname: redis-commander
    ports:
      - 8001:8081
    links:
      - redis_main
      - redis_replication
    environment:
      - REDIS_HOSTS=main:redis_main:6379, replica:redis_replication:6380

  # Minio is a service that mimics local S3.
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    ports:
      - 9000:9000
    environment:
      - MINIO_ACCESS_KEY=Q3AM3UQ867SPQQA43P2F
      - MINIO_SECRET_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
      - MINIO_REGION=us-east-1
      - MINIO_DOMAIN=localhost
      - MINIO_BROWSER=on
    command: server /export
    volumes:
      # - ./config:/root/.minio
      - ./data:/data
  mc:
    image: minio/mc:latest
    depends_on:
      - minio
    container_name: mc
    environment:
      - MINIO_ACCESS_KEY=Q3AM3UQ867SPQQA43P2F
      - MINIO_SECRET_KEY=zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set s3 http://minio:9000 Q3AM3UQ867SPQQA43P2F zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG) do echo '...waiting...' && sleep 1; done;
      /usr/bin/echo 'The access key is $${MINIO_ACCESS_KEY}';
      /usr/bin/mc mb s3/bucket --region us-east-1;
      /usr/bin/mc policy set public s3/bucket;
      exit 0;
      "
